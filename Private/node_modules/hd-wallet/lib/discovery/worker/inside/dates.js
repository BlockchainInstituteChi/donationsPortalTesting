'use strict';

var cov_1zzcs6pzp3 = function () {
    var path = '/home/g/dev/hd-wallet/src/discovery/worker/inside/dates.js',
        hash = '58d0087d0942ff6dc44ba7a1e66acf52c8cbb1d6',
        Function = function () {}.constructor,
        global = new Function('return this')(),
        gcv = '__coverage__',
        coverageData = {
        path: '/home/g/dev/hd-wallet/src/discovery/worker/inside/dates.js',
        statementMap: {
            '0': {
                start: {
                    line: 13,
                    column: 4
                },
                end: {
                    line: 27,
                    column: 5
                }
            },
            '1': {
                start: {
                    line: 14,
                    column: 8
                },
                end: {
                    line: 18,
                    column: 10
                }
            },
            '2': {
                start: {
                    line: 20,
                    column: 27
                },
                end: {
                    line: 20,
                    column: 28
                }
            },
            '3': {
                start: {
                    line: 21,
                    column: 21
                },
                end: {
                    line: 21,
                    column: 62
                }
            },
            '4': {
                start: {
                    line: 22,
                    column: 8
                },
                end: {
                    line: 26,
                    column: 10
                }
            },
            '5': {
                start: {
                    line: 31,
                    column: 15
                },
                end: {
                    line: 31,
                    column: 53
                }
            },
            '6': {
                start: {
                    line: 32,
                    column: 15
                },
                end: {
                    line: 32,
                    column: 55
                }
            },
            '7': {
                start: {
                    line: 33,
                    column: 15
                },
                end: {
                    line: 33,
                    column: 55
                }
            },
            '8': {
                start: {
                    line: 34,
                    column: 4
                },
                end: {
                    line: 34,
                    column: 36
                }
            },
            '9': {
                start: {
                    line: 38,
                    column: 17
                },
                end: {
                    line: 38,
                    column: 49
                }
            },
            '10': {
                start: {
                    line: 39,
                    column: 15
                },
                end: {
                    line: 39,
                    column: 59
                }
            },
            '11': {
                start: {
                    line: 40,
                    column: 15
                },
                end: {
                    line: 40,
                    column: 52
                }
            },
            '12': {
                start: {
                    line: 41,
                    column: 4
                },
                end: {
                    line: 41,
                    column: 38
                }
            },
            '13': {
                start: {
                    line: 45,
                    column: 4
                },
                end: {
                    line: 47,
                    column: 5
                }
            },
            '14': {
                start: {
                    line: 46,
                    column: 8
                },
                end: {
                    line: 46,
                    column: 23
                }
            },
            '15': {
                start: {
                    line: 48,
                    column: 4
                },
                end: {
                    line: 48,
                    column: 13
                }
            },
            '16': {
                start: {
                    line: 55,
                    column: 4
                },
                end: {
                    line: 59,
                    column: 5
                }
            },
            '17': {
                start: {
                    line: 56,
                    column: 18
                },
                end: {
                    line: 56,
                    column: 62
                }
            },
            '18': {
                start: {
                    line: 57,
                    column: 8
                },
                end: {
                    line: 57,
                    column: 50
                }
            },
            '19': {
                start: {
                    line: 58,
                    column: 8
                },
                end: {
                    line: 58,
                    column: 52
                }
            }
        },
        fnMap: {
            '0': {
                name: 'deriveDateFormats',
                decl: {
                    start: {
                        line: 5,
                        column: 16
                    },
                    end: {
                        line: 5,
                        column: 33
                    }
                },
                loc: {
                    start: {
                        line: 12,
                        column: 2
                    },
                    end: {
                        line: 28,
                        column: 1
                    }
                },
                line: 12
            },
            '1': {
                name: 'dateToTimeFormat',
                decl: {
                    start: {
                        line: 30,
                        column: 9
                    },
                    end: {
                        line: 30,
                        column: 25
                    }
                },
                loc: {
                    start: {
                        line: 30,
                        column: 46
                    },
                    end: {
                        line: 35,
                        column: 1
                    }
                },
                line: 30
            },
            '2': {
                name: 'dateToDayFormat',
                decl: {
                    start: {
                        line: 37,
                        column: 9
                    },
                    end: {
                        line: 37,
                        column: 24
                    }
                },
                loc: {
                    start: {
                        line: 37,
                        column: 45
                    },
                    end: {
                        line: 42,
                        column: 1
                    }
                },
                line: 37
            },
            '3': {
                name: 'addZero',
                decl: {
                    start: {
                        line: 44,
                        column: 9
                    },
                    end: {
                        line: 44,
                        column: 16
                    }
                },
                loc: {
                    start: {
                        line: 44,
                        column: 36
                    },
                    end: {
                        line: 49,
                        column: 1
                    }
                },
                line: 44
            },
            '4': {
                name: 'recomputeDateFormats',
                decl: {
                    start: {
                        line: 51,
                        column: 16
                    },
                    end: {
                        line: 51,
                        column: 36
                    }
                },
                loc: {
                    start: {
                        line: 54,
                        column: 2
                    },
                    end: {
                        line: 60,
                        column: 1
                    }
                },
                line: 54
            }
        },
        branchMap: {
            '0': {
                loc: {
                    start: {
                        line: 13,
                        column: 4
                    },
                    end: {
                        line: 27,
                        column: 5
                    }
                },
                type: 'if',
                locations: [{
                    start: {
                        line: 13,
                        column: 4
                    },
                    end: {
                        line: 27,
                        column: 5
                    }
                }, {
                    start: {
                        line: 13,
                        column: 4
                    },
                    end: {
                        line: 27,
                        column: 5
                    }
                }],
                line: 13
            },
            '1': {
                loc: {
                    start: {
                        line: 45,
                        column: 4
                    },
                    end: {
                        line: 47,
                        column: 5
                    }
                },
                type: 'if',
                locations: [{
                    start: {
                        line: 45,
                        column: 4
                    },
                    end: {
                        line: 47,
                        column: 5
                    }
                }, {
                    start: {
                        line: 45,
                        column: 4
                    },
                    end: {
                        line: 47,
                        column: 5
                    }
                }],
                line: 45
            }
        },
        s: {
            '0': 0,
            '1': 0,
            '2': 0,
            '3': 0,
            '4': 0,
            '5': 0,
            '6': 0,
            '7': 0,
            '8': 0,
            '9': 0,
            '10': 0,
            '11': 0,
            '12': 0,
            '13': 0,
            '14': 0,
            '15': 0,
            '16': 0,
            '17': 0,
            '18': 0,
            '19': 0
        },
        f: {
            '0': 0,
            '1': 0,
            '2': 0,
            '3': 0,
            '4': 0
        },
        b: {
            '0': [0, 0],
            '1': [0, 0]
        },
        _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
    },
        coverage = global[gcv] || (global[gcv] = {});

    if (coverage[path] && coverage[path].hash === hash) {
        return coverage[path];
    }

    coverageData.hash = hash;
    return coverage[path] = coverageData;
}();

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.deriveDateFormats = deriveDateFormats;
exports.recomputeDateFormats = recomputeDateFormats;


// Functions for date formatting
function deriveDateFormats(t, wantedOffset // what (new Date().getTimezoneOffset()) returns
) {
    cov_1zzcs6pzp3.f[0]++;
    cov_1zzcs6pzp3.s[0]++;

    if (t == null) {
        cov_1zzcs6pzp3.b[0][0]++;
        cov_1zzcs6pzp3.s[1]++;

        return {
            timestamp: null,
            dateInfoDayFormat: null,
            dateInfoTimeFormat: null
        };
    } else {
        cov_1zzcs6pzp3.b[0][1]++;

        var t_ = (cov_1zzcs6pzp3.s[2]++, t);
        var date = (cov_1zzcs6pzp3.s[3]++, new Date((t_ - wantedOffset * 60) * 1000));
        cov_1zzcs6pzp3.s[4]++;
        return {
            timestamp: t_,
            dateInfoDayFormat: dateToDayFormat(date),
            dateInfoTimeFormat: dateToTimeFormat(date)
        };
    }
}


function dateToTimeFormat(date) {
    cov_1zzcs6pzp3.f[1]++;

    var hh = (cov_1zzcs6pzp3.s[5]++, addZero(date.getUTCHours().toString()));
    var mm = (cov_1zzcs6pzp3.s[6]++, addZero(date.getUTCMinutes().toString()));
    var ss = (cov_1zzcs6pzp3.s[7]++, addZero(date.getUTCSeconds().toString()));
    cov_1zzcs6pzp3.s[8]++;
    return hh + ':' + mm + ':' + ss;
}

function dateToDayFormat(date) {
    cov_1zzcs6pzp3.f[2]++;

    var yyyy = (cov_1zzcs6pzp3.s[9]++, date.getUTCFullYear().toString());
    var mm = (cov_1zzcs6pzp3.s[10]++, addZero((date.getUTCMonth() + 1).toString())); // getMonth() is zero-based
    var dd = (cov_1zzcs6pzp3.s[11]++, addZero(date.getUTCDate().toString()));
    cov_1zzcs6pzp3.s[12]++;
    return yyyy + '-' + mm + '-' + dd;
}

function addZero(s) {
    cov_1zzcs6pzp3.f[3]++;
    cov_1zzcs6pzp3.s[13]++;

    if (s.length === 1) {
        cov_1zzcs6pzp3.b[1][0]++;
        cov_1zzcs6pzp3.s[14]++;

        return '0' + s;
    } else {
        cov_1zzcs6pzp3.b[1][1]++;
    }
    cov_1zzcs6pzp3.s[15]++;
    return s;
}

function recomputeDateFormats(ts, wantedOffset) {
    cov_1zzcs6pzp3.f[4]++;
    cov_1zzcs6pzp3.s[16]++;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = ts[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var t = _step.value;

            var r = (cov_1zzcs6pzp3.s[17]++, deriveDateFormats(t.timestamp, wantedOffset));
            cov_1zzcs6pzp3.s[18]++;
            t.dateInfoDayFormat = r.dateInfoDayFormat;
            cov_1zzcs6pzp3.s[19]++;
            t.dateInfoTimeFormat = r.dateInfoTimeFormat;
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
}