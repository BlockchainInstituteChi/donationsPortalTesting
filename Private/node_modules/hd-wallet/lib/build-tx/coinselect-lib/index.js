'use strict';

var cov_2lngvednj3 = function () {
    var path = '/home/g/dev/hd-wallet/src/build-tx/coinselect-lib/index.js',
        hash = '8c3f08f072514d6ead37ffc35fcf0f0acc0a7486',
        Function = function () {}.constructor,
        global = new Function('return this')(),
        gcv = '__coverage__',
        coverageData = {
        path: '/home/g/dev/hd-wallet/src/build-tx/coinselect-lib/index.js',
        statementMap: {
            '0': {
                start: {
                    line: 4,
                    column: 21
                },
                end: {
                    line: 4,
                    column: 53
                }
            },
            '1': {
                start: {
                    line: 5,
                    column: 12
                },
                end: {
                    line: 5,
                    column: 35
                }
            },
            '2': {
                start: {
                    line: 6,
                    column: 14
                },
                end: {
                    line: 6,
                    column: 32
                }
            },
            '3': {
                start: {
                    line: 7,
                    column: 14
                },
                end: {
                    line: 7,
                    column: 32
                }
            },
            '4': {
                start: {
                    line: 8,
                    column: 21
                },
                end: {
                    line: 8,
                    column: 46
                }
            },
            '5': {
                start: {
                    line: 10,
                    column: 0
                },
                end: {
                    line: 19,
                    column: 2
                }
            },
            '6': {
                start: {
                    line: 11,
                    column: 4
                },
                end: {
                    line: 11,
                    column: 47
                }
            },
            '7': {
                start: {
                    line: 13,
                    column: 22
                },
                end: {
                    line: 16,
                    column: 5
                }
            },
            '8': {
                start: {
                    line: 18,
                    column: 4
                },
                end: {
                    line: 18,
                    column: 56
                }
            }
        },
        fnMap: {
            '0': {
                name: '(anonymous_0)',
                decl: {
                    start: {
                        line: 10,
                        column: 17
                    },
                    end: {
                        line: 10,
                        column: 18
                    }
                },
                loc: {
                    start: {
                        line: 10,
                        column: 62
                    },
                    end: {
                        line: 19,
                        column: 1
                    }
                },
                line: 10
            }
        },
        branchMap: {},
        s: {
            '0': 0,
            '1': 0,
            '2': 0,
            '3': 0,
            '4': 0,
            '5': 0,
            '6': 0,
            '7': 0,
            '8': 0
        },
        f: {
            '0': 0
        },
        b: {},
        _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
    },
        coverage = global[gcv] || (global[gcv] = {});

    if (coverage[path] && coverage[path].hash === hash) {
        return coverage[path];
    }

    coverageData.hash = hash;
    return coverage[path] = coverageData;
}();

// I am using coinselect like this; the end-goal is, however, to merge all the changes
// back into the upstream and use coinselect from npm

var accumulative = (cov_2lngvednj3.s[0]++, require('./inputs/accumulative'));
var bnb = (cov_2lngvednj3.s[1]++, require('./inputs/bnb'));
var sorts = (cov_2lngvednj3.s[2]++, require('./sorts'));
var utils = (cov_2lngvednj3.s[3]++, require('./utils'));
var tryConfirmed = (cov_2lngvednj3.s[4]++, require('./tryconfirmed'));

cov_2lngvednj3.s[5]++;
module.exports = function (inputs, outputs, feeRate, options) {
    cov_2lngvednj3.f[0]++;
    cov_2lngvednj3.s[6]++;

    inputs = inputs.sort(sorts.score(feeRate));

    var algorithm = (cov_2lngvednj3.s[7]++, tryConfirmed(utils.anyOf([bnb(0.5), accumulative]), options));

    cov_2lngvednj3.s[8]++;
    return algorithm(inputs, outputs, feeRate, options);
};