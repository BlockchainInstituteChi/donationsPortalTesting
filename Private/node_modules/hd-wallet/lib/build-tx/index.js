'use strict';

var cov_2d9l03aokf = function () {
    var path = '/home/g/dev/hd-wallet/src/build-tx/index.js',
        hash = 'db46ebb2586e833cc74911efcdece581180730e4',
        Function = function () {}.constructor,
        global = new Function('return this')(),
        gcv = '__coverage__',
        coverageData = {
        path: '/home/g/dev/hd-wallet/src/build-tx/index.js',
        statementMap: {
            '0': {
                start: {
                    line: 16,
                    column: 4
                },
                end: {
                    line: 18,
                    column: 5
                }
            },
            '1': {
                start: {
                    line: 17,
                    column: 8
                },
                end: {
                    line: 17,
                    column: 28
                }
            },
            '2': {
                start: {
                    line: 19,
                    column: 4
                },
                end: {
                    line: 21,
                    column: 5
                }
            },
            '3': {
                start: {
                    line: 20,
                    column: 8
                },
                end: {
                    line: 20,
                    column: 58
                }
            },
            '4': {
                start: {
                    line: 23,
                    column: 19
                },
                end: {
                    line: 23,
                    column: 41
                }
            },
            '5': {
                start: {
                    line: 24,
                    column: 4
                },
                end: {
                    line: 28,
                    column: 5
                }
            },
            '6': {
                start: {
                    line: 25,
                    column: 8
                },
                end: {
                    line: 25,
                    column: 43
                }
            },
            '7': {
                start: {
                    line: 27,
                    column: 8
                },
                end: {
                    line: 27,
                    column: 49
                }
            },
            '8': {
                start: {
                    line: 29,
                    column: 25
                },
                end: {
                    line: 29,
                    column: 61
                }
            },
            '9': {
                start: {
                    line: 31,
                    column: 38
                },
                end: {
                    line: 31,
                    column: 53
                }
            },
            '10': {
                start: {
                    line: 32,
                    column: 4
                },
                end: {
                    line: 36,
                    column: 5
                }
            },
            '11': {
                start: {
                    line: 33,
                    column: 8
                },
                end: {
                    line: 33,
                    column: 136
                }
            },
            '12': {
                start: {
                    line: 35,
                    column: 8
                },
                end: {
                    line: 35,
                    column: 49
                }
            },
            '13': {
                start: {
                    line: 38,
                    column: 4
                },
                end: {
                    line: 58,
                    column: 5
                }
            },
            '14': {
                start: {
                    line: 39,
                    column: 8
                },
                end: {
                    line: 39,
                    column: 58
                }
            },
            '15': {
                start: {
                    line: 41,
                    column: 8
                },
                end: {
                    line: 43,
                    column: 9
                }
            },
            '16': {
                start: {
                    line: 42,
                    column: 12
                },
                end: {
                    line: 42,
                    column: 54
                }
            },
            '17': {
                start: {
                    line: 45,
                    column: 31
                },
                end: {
                    line: 56,
                    column: 9
                }
            },
            '18': {
                start: {
                    line: 57,
                    column: 8
                },
                end: {
                    line: 57,
                    column: 63
                }
            }
        },
        fnMap: {
            '0': {
                name: 'buildTx',
                decl: {
                    start: {
                        line: 13,
                        column: 16
                    },
                    end: {
                        line: 13,
                        column: 23
                    }
                },
                loc: {
                    start: {
                        line: 15,
                        column: 17
                    },
                    end: {
                        line: 59,
                        column: 1
                    }
                },
                line: 15
            }
        },
        branchMap: {
            '0': {
                loc: {
                    start: {
                        line: 16,
                        column: 4
                    },
                    end: {
                        line: 18,
                        column: 5
                    }
                },
                type: 'if',
                locations: [{
                    start: {
                        line: 16,
                        column: 4
                    },
                    end: {
                        line: 18,
                        column: 5
                    }
                }, {
                    start: {
                        line: 16,
                        column: 4
                    },
                    end: {
                        line: 18,
                        column: 5
                    }
                }],
                line: 16
            },
            '1': {
                loc: {
                    start: {
                        line: 19,
                        column: 4
                    },
                    end: {
                        line: 21,
                        column: 5
                    }
                },
                type: 'if',
                locations: [{
                    start: {
                        line: 19,
                        column: 4
                    },
                    end: {
                        line: 21,
                        column: 5
                    }
                }, {
                    start: {
                        line: 19,
                        column: 4
                    },
                    end: {
                        line: 21,
                        column: 5
                    }
                }],
                line: 19
            },
            '2': {
                loc: {
                    start: {
                        line: 38,
                        column: 4
                    },
                    end: {
                        line: 58,
                        column: 5
                    }
                },
                type: 'if',
                locations: [{
                    start: {
                        line: 38,
                        column: 4
                    },
                    end: {
                        line: 58,
                        column: 5
                    }
                }, {
                    start: {
                        line: 38,
                        column: 4
                    },
                    end: {
                        line: 58,
                        column: 5
                    }
                }],
                line: 38
            },
            '3': {
                loc: {
                    start: {
                        line: 41,
                        column: 8
                    },
                    end: {
                        line: 43,
                        column: 9
                    }
                },
                type: 'if',
                locations: [{
                    start: {
                        line: 41,
                        column: 8
                    },
                    end: {
                        line: 43,
                        column: 9
                    }
                }, {
                    start: {
                        line: 41,
                        column: 8
                    },
                    end: {
                        line: 43,
                        column: 9
                    }
                }],
                line: 41
            }
        },
        s: {
            '0': 0,
            '1': 0,
            '2': 0,
            '3': 0,
            '4': 0,
            '5': 0,
            '6': 0,
            '7': 0,
            '8': 0,
            '9': 0,
            '10': 0,
            '11': 0,
            '12': 0,
            '13': 0,
            '14': 0,
            '15': 0,
            '16': 0,
            '17': 0,
            '18': 0
        },
        f: {
            '0': 0
        },
        b: {
            '0': [0, 0],
            '1': [0, 0],
            '2': [0, 0],
            '3': [0, 0]
        },
        _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
    },
        coverage = global[gcv] || (global[gcv] = {});

    if (coverage[path] && coverage[path].hash === hash) {
        return coverage[path];
    }

    coverageData.hash = hash;
    return coverage[path] = coverageData;
}();

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BuildTxInput = exports.BuildTxOutput = exports.BuildTxTransaction = exports.BuildTxResult = exports.BuildTxOutputRequest = exports.BuildTxRequest = exports.BuildTxEmptyResult = undefined;

var _result = require('./result');

Object.defineProperty(exports, 'BuildTxEmptyResult', {
    enumerable: true,
    get: function get() {
        return _result.empty;
    }
});

var _request = require('./request');

Object.defineProperty(exports, 'BuildTxRequest', {
    enumerable: true,
    get: function get() {
        return _request.Request;
    }
});
Object.defineProperty(exports, 'BuildTxOutputRequest', {
    enumerable: true,
    get: function get() {
        return _request.OutputRequest;
    }
});
Object.defineProperty(exports, 'BuildTxResult', {
    enumerable: true,
    get: function get() {
        return _result.Result;
    }
});

var _transaction = require('./transaction');

Object.defineProperty(exports, 'BuildTxTransaction', {
    enumerable: true,
    get: function get() {
        return _transaction.Transaction;
    }
});
Object.defineProperty(exports, 'BuildTxOutput', {
    enumerable: true,
    get: function get() {
        return _transaction.Output;
    }
});
Object.defineProperty(exports, 'BuildTxInput', {
    enumerable: true,
    get: function get() {
        return _transaction.Input;
    }
});
exports.buildTx = buildTx;

var request = _interopRequireWildcard(_request);

var result = _interopRequireWildcard(_result);

var transaction = _interopRequireWildcard(_transaction);

var _coinselect = require('./coinselect');

var coinselect = _interopRequireWildcard(_coinselect);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function buildTx(_ref) {
    var utxos = _ref.utxos,
        outputs = _ref.outputs,
        height = _ref.height,
        feeRate = _ref.feeRate,
        segwit = _ref.segwit,
        inputAmounts = _ref.inputAmounts,
        basePath = _ref.basePath,
        network = _ref.network,
        changeId = _ref.changeId,
        changeAddress = _ref.changeAddress,
        dustThreshold = _ref.dustThreshold;
    cov_2d9l03aokf.f[0]++;
    cov_2d9l03aokf.s[0]++;

    if (outputs.length === 0) {
        cov_2d9l03aokf.b[0][0]++;
        cov_2d9l03aokf.s[1]++;

        return result.empty;
    } else {
        cov_2d9l03aokf.b[0][1]++;
    }
    cov_2d9l03aokf.s[2]++;
    if (utxos.length === 0) {
        cov_2d9l03aokf.b[1][0]++;
        cov_2d9l03aokf.s[3]++;

        return { type: 'error', error: 'NOT-ENOUGH-FUNDS' };
    } else {
        cov_2d9l03aokf.b[1][1]++;
    }

    var countMax = (cov_2d9l03aokf.s[4]++, { exists: false, id: 0 });
    cov_2d9l03aokf.s[5]++;
    try {
        cov_2d9l03aokf.s[6]++;

        countMax = request.getMax(outputs);
    } catch (e) {
        cov_2d9l03aokf.s[7]++;

        return { type: 'error', error: e.message };
    }
    var splitOutputs = (cov_2d9l03aokf.s[8]++, request.splitByCompleteness(outputs));

    var csResult = (cov_2d9l03aokf.s[9]++, { type: 'false' });
    cov_2d9l03aokf.s[10]++;
    try {
        cov_2d9l03aokf.s[11]++;

        csResult = coinselect.coinselect(utxos, outputs, height, feeRate, segwit, countMax.exists, countMax.id, dustThreshold, network);
    } catch (e) {
        cov_2d9l03aokf.s[12]++;

        return { type: 'error', error: e.message };
    }

    cov_2d9l03aokf.s[13]++;
    if (csResult.type === 'false') {
        cov_2d9l03aokf.b[2][0]++;
        cov_2d9l03aokf.s[14]++;

        return { type: 'error', error: 'NOT-ENOUGH-FUNDS' };
    } else {
        cov_2d9l03aokf.b[2][1]++;
        cov_2d9l03aokf.s[15]++;

        if (splitOutputs.incomplete.length > 0) {
            cov_2d9l03aokf.b[3][0]++;
            cov_2d9l03aokf.s[16]++;

            return result.getNonfinalResult(csResult);
        } else {
            cov_2d9l03aokf.b[3][1]++;
        }

        var resTransaction = (cov_2d9l03aokf.s[17]++, transaction.createTransaction(utxos, csResult.result.inputs, splitOutputs.complete, csResult.result.outputs, segwit, inputAmounts, basePath, changeId, changeAddress, network));
        cov_2d9l03aokf.s[18]++;
        return result.getFinalResult(csResult, resTransaction);
    }
}