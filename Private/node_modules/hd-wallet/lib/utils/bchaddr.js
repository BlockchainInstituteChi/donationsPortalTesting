'use strict';

var cov_1pe5txg10j = function () {
    var path = '/home/g/dev/hd-wallet/src/utils/bchaddr.js',
        hash = '3fc1e0afe8edf28a46737acbc165c17261f1da0e',
        Function = function () {}.constructor,
        global = new Function('return this')(),
        gcv = '__coverage__',
        coverageData = {
        path: '/home/g/dev/hd-wallet/src/utils/bchaddr.js',
        statementMap: {
            '0': {
                start: {
                    line: 6,
                    column: 34
                },
                end: {
                    line: 15,
                    column: 1
                }
            },
            '1': {
                start: {
                    line: 7,
                    column: 4
                },
                end: {
                    line: 13,
                    column: 5
                }
            },
            '2': {
                start: {
                    line: 8,
                    column: 8
                },
                end: {
                    line: 10,
                    column: 9
                }
            },
            '3': {
                start: {
                    line: 9,
                    column: 12
                },
                end: {
                    line: 9,
                    column: 54
                }
            },
            '4': {
                start: {
                    line: 14,
                    column: 4
                },
                end: {
                    line: 14,
                    column: 19
                }
            }
        },
        fnMap: {
            '0': {
                name: '(anonymous_0)',
                decl: {
                    start: {
                        line: 6,
                        column: 34
                    },
                    end: {
                        line: 6,
                        column: 35
                    }
                },
                loc: {
                    start: {
                        line: 6,
                        column: 63
                    },
                    end: {
                        line: 15,
                        column: 1
                    }
                },
                line: 6
            }
        },
        branchMap: {
            '0': {
                loc: {
                    start: {
                        line: 8,
                        column: 8
                    },
                    end: {
                        line: 10,
                        column: 9
                    }
                },
                type: 'if',
                locations: [{
                    start: {
                        line: 8,
                        column: 8
                    },
                    end: {
                        line: 10,
                        column: 9
                    }
                }, {
                    start: {
                        line: 8,
                        column: 8
                    },
                    end: {
                        line: 10,
                        column: 9
                    }
                }],
                line: 8
            }
        },
        s: {
            '0': 0,
            '1': 0,
            '2': 0,
            '3': 0,
            '4': 0
        },
        f: {
            '0': 0
        },
        b: {
            '0': [0, 0]
        },
        _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
    },
        coverage = global[gcv] || (global[gcv] = {});

    if (coverage[path] && coverage[path].hash === hash) {
        return coverage[path];
    }

    coverageData.hash = hash;
    return coverage[path] = coverageData;
}();

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.convertCashAddress = undefined;

var _bchaddrjs = require('bchaddrjs');

var _bchaddrjs2 = _interopRequireDefault(_bchaddrjs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Cashaddr format is neither base58 nor bech32, so it would fail
// in bitcoinjs-lib-zchash. For this reason use legacy format
cov_1pe5txg10j.s[0]++;
var convertCashAddress = exports.convertCashAddress = function convertCashAddress(address) {
    cov_1pe5txg10j.f[0]++;
    cov_1pe5txg10j.s[1]++;

    try {
        cov_1pe5txg10j.s[2]++;

        if (_bchaddrjs2.default.isCashAddress(address)) {
            cov_1pe5txg10j.b[0][0]++;
            cov_1pe5txg10j.s[3]++;

            return _bchaddrjs2.default.toLegacyAddress(address);
        } else {
            cov_1pe5txg10j.b[0][1]++;
        }
    } catch (e) {
        // noting
    }
    cov_1pe5txg10j.s[4]++;
    return address;
};